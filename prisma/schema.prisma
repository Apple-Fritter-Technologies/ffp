generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum OrderStatus {
  pending
  completed
  cancelled
  processing
  shipped
}

enum ProductType {
  physical
  digital
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique
  email     String    @unique
  name      String?
  role      Role      @default(user)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  contact   Contact[]
  address   Address[]

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  name      String // full name of the recipient
  street    String
  city      String
  state     String
  zipCode   String
  country   String   @default("United States")
  phone     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order[]

  @@index([userId])
  @@map("addresses")
}

model Genre {
  id           String   @id @default(uuid())
  name         String   @unique
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  books        Book[]

  @@index([displayOrder])
  @@map("genres")
}

model Book {
  id          String      @id @default(uuid())
  title       String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  genreId     String
  author      String?
  imageUrl    String?
  buttonText  String?     @default("Buy Now")
  isAvailable Boolean     @default(true)
  isFeatured  Boolean     @default(false)
  productType ProductType @default(physical)
  downloadUrl String?
  fileSize    String?
  format      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  genre      Genre       @relation(fields: [genreId], references: [id])
  orderItems OrderItem[]

  @@index([genreId])
  @@index([isFeatured])
  @@index([isAvailable])
  @@index([productType])
  @@index([createdAt])
  @@map("books")
}

model Podcast {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  videoUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
  @@map("podcasts")
}

model Order {
  id                String      @id @default(uuid())
  userId            String
  totalPrice        Decimal     @db.Decimal(10, 2)
  status            OrderStatus @default(pending)
  hasPhysicalItems  Boolean     @default(false)
  shippingAddressId String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  orderItems      OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([hasPhysicalItems])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2) // Store price at time of order

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id])

  @@unique([orderId, bookId])
  @@index([orderId])
  @@index([bookId])
  @@map("order_items")
}

model Contact {
  id        String   @id @default(uuid())
  email     String
  name      String
  message   String
  isRead    Boolean  @default(false)
  subject   String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("contacts")
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("newsletters")
}
