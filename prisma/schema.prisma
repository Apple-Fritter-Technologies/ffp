generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  PROCESSING
  SHIPPED
}

model User {
  id        String    @id @default(uuid())
  clerkId   String    @unique
  email     String    @unique
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  Contact   Contact[]

  @@map("users")
}

model Genre {
  id           String   @id @default(uuid())
  name         String   @unique
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  books        Book[]

  @@index([displayOrder])
  @@map("genres")
}

model Book {
  id          String   @id @default(uuid())
  title       String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  genreId     String
  author      String?
  imageUrl    String?
  buttonText  String?  @default("Buy Now")
  isAvailable Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  genre      Genre       @relation(fields: [genreId], references: [id])
  orderItems OrderItem[]

  @@index([genreId])
  @@index([isFeatured])
  @@index([isAvailable])
  @@index([createdAt])
  @@map("books")
}

model Podcast {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String?
  videoUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
  @@map("podcasts")
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  totalPrice Decimal     @db.Decimal(10, 2)
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id       String  @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2) // Store price at time of order

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  book  Book  @relation(fields: [bookId], references: [id])

  @@unique([orderId, bookId])
  @@index([orderId])
  @@index([bookId])
  @@map("order_items")
}

model Contact {
  id        String   @id @default(uuid())
  email     String
  name      String
  message   String
  isRead    Boolean  @default(false)
  subject   String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("contacts")
}
